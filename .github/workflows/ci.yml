name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mailhog:
        image: mailhog/mailhog
        ports:
          - 1025:1025
          - 8025:8025

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          architecture: "x64"

      - name: cache poetry install
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-1.3.0

      - uses: snok/install-poetry@v1
        with:
          version: 1.3.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: cache deps
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: Lint
        run: |
          poetry run isort .
          poetry run black .
          poetry run ruff check .
          poetry run ruff format .


      - name: Create .env file with fake email credentials
        run: |
          echo 'EMAIL_PASS="wefwef"' >> .env
          echo 'EMAIL_ACCOUNT="admin@victorciurana.com"' >> .env

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=bit_apply --cov-report=xml --cov-report=term-missing --cov-fail-under=100
